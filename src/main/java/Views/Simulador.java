/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Views;

import Enums.CPUSuport;
import Interfaces.EstatisticasDelegate;
import Interfaces.FileImportDelegate;
import Interfaces.PipelineViewDelegate;
import Models.Instruction;
import Models.SuperEscalar.PipelineSuperScalar;
import ViewModel.SimuladorViewModel;
import java.awt.Color;
import javax.swing.JFrame;

/**
 *
 * @author Walla
 */
public class Simulador extends javax.swing.JFrame implements EstatisticasDelegate, FileImportDelegate, PipelineViewDelegate {
    
    SimuladorViewModel vm = new SimuladorViewModel();
            
    Estatisticas estatisticas = new Estatisticas(this);
    PipelineEscalar pipelineScalar = new PipelineEscalar(this);
    PipelineSuperEscalar pipelineSuperScalar = new PipelineSuperEscalar(this);

    /**
     * Creates new form Simulador
     */
    public Simulador() {
        initComponents();
        
        pipeline_estatisticas.add(estatisticas);
        
        if(!vm.getIsSuperScalar()){
            pipeline_view.add(pipelineScalar);
        } else {
            pipeline_view.add(pipelineSuperScalar);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        painel = new javax.swing.JPanel();
        pipeline_view = new javax.swing.JPanel();
        pipeline_estatisticas = new javax.swing.JPanel();
        jMenuBar1 = new javax.swing.JMenuBar();
        simulador_menu = new javax.swing.JMenu();
        alterar_arquitetura = new javax.swing.JMenuItem();
        importar_codigo = new javax.swing.JMenuItem();
        sair = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMinimumSize(new java.awt.Dimension(1240, 680));

        java.awt.GridBagLayout jPanel1Layout = new java.awt.GridBagLayout();
        jPanel1Layout.columnWeights = new double[] {400.0};
        jPanel1Layout.rowWeights = new double[] {520.0};
        painel.setLayout(jPanel1Layout);

        pipeline_view.setBackground(new java.awt.Color(51, 255, 0));
        pipeline_view.setLayout(new java.awt.BorderLayout());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 720;
        gridBagConstraints.ipady = 600;
        painel.add(pipeline_view, gridBagConstraints);

        pipeline_estatisticas.setBackground(new java.awt.Color(255, 102, 102));
        pipeline_estatisticas.setLayout(new java.awt.BorderLayout());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.gridwidth = java.awt.GridBagConstraints.RELATIVE;
        gridBagConstraints.gridheight = java.awt.GridBagConstraints.RELATIVE;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 200;
        gridBagConstraints.weightx = 250.0;
        painel.add(pipeline_estatisticas, gridBagConstraints);

        simulador_menu.setText("Simulador");

        alterar_arquitetura.setText("Alterar Arquitetura");
        alterar_arquitetura.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                alterar_arquiteturaActionPerformed(evt);
            }
        });
        simulador_menu.add(alterar_arquitetura);

        importar_codigo.setText("Importar CÃ³digo");
        importar_codigo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                importar_codigoActionPerformed(evt);
            }
        });
        simulador_menu.add(importar_codigo);

        sair.setText("Sair");
        sair.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sairActionPerformed(evt);
            }
        });
        simulador_menu.add(sair);

        jMenuBar1.add(simulador_menu);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(painel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(painel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void alterar_arquiteturaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_alterar_arquiteturaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_alterar_arquiteturaActionPerformed

    private void sairActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sairActionPerformed
        this.dispose();
    }//GEN-LAST:event_sairActionPerformed

    private void importar_codigoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_importar_codigoActionPerformed
        importCode();
    }//GEN-LAST:event_importar_codigoActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Simulador.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Simulador.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Simulador.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Simulador.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Simulador().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem alterar_arquitetura;
    private javax.swing.JMenuItem importar_codigo;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel painel;
    private javax.swing.JPanel pipeline_estatisticas;
    private javax.swing.JPanel pipeline_view;
    private javax.swing.JMenuItem sair;
    private javax.swing.JMenu simulador_menu;
    // End of variables declaration//GEN-END:variables

    @Override
    public void setSuport(CPUSuport suport) {
        vm.setSuport(suport);
        repaint();
    }

    @Override
    public CPUSuport getSuport() {
        return vm.getSuport();
    }

    @Override
    public boolean getIsSuperScalar() {
        return vm.getIsSuperScalar();
    }

    @Override
    public void setCPUMode(boolean isSuperScalar) {
        vm.setCPUMode(isSuperScalar);
        setView();
        repaint();
    }
    
    public void setView(){
        pipeline_view.removeAll();
    }
    
    public void repaint(){
        estatisticas.repaint();
        
        if(!vm.getIsSuperScalar()){
            pipeline_view.add(pipelineScalar);
            pipelineScalar.setStagesValues(vm.getStagesValues());
        } else {
            pipeline_view.add(pipelineSuperScalar);
            pipelineSuperScalar.setStagesValues(vm.getStagesValues(), vm.getBuffer());
//            pipelineSuperScalar.setStageValues(vm.getStagesValues());
        }
        
        this.revalidate();
        super.repaint();
    }

    @Override
    public boolean enableInitMode() {
        return vm.enableInitMode();
    }

    @Override
    public boolean isStart() {
        return vm.isStart();
    }

    @Override
    public void importCode() {
        FileImport fi = new FileImport(this);
        fi.setVisible(true);
    }

    @Override
    public void hasImportCode(String path) {
        vm.processCode(path);
        repaint();
    }

    @Override
    public void runCycle(boolean isAuto) {
        vm.runCycle(isAuto);
        repaint();
    }

    @Override
    public Color getColorInstruction(Instruction i) {
        return vm.getColorInstruction(i);
    }

    @Override
    public String setInformations() {
        return vm.setInformations();
    }
    
    @Override
    public void restart(){
        vm.restart();
        repaint();
    }
    
}
